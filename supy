#!/usr/bin/env python
import os,sys,inspect
from core import utils,configuration
############################################
def opts() :
    from optparse import OptionParser
    parser = OptionParser("usage: %prog analysis-file [options]")
    def argOrTrue(option, opt, value, parser) :
        peek = next(iter(parser.rargs),None)
        if peek and peek[0]!='-' : del parser.rargs[0]
        setattr(parser.values, option.dest, peek if peek and peek[0]!='-' else True)
    parser.add_option("--loop",    dest = "loop",    default = None,  metavar = "N",          help = "loop over events using N cores (N>0)")
    parser.add_option("--slices",  dest = "slices",  default = None,  metavar = "S",          help = "split each sample into S slices (S>0)")
    parser.add_option("--profile", dest = "profile", default = False, action  = "store_true", help = "profile the code")
    parser.add_option("--batch",   dest = "batch",   default = False, action  = "store_true", help = "submit to batch queue")
    parser.add_option("--tag",     dest = "tag",     default = "",    metavar = "PAR_PAR_PAR",help = "specific combo of multiparameters")
    parser.add_option("--sample",  dest = "sample",  default = None,                          help = "specific sample")
    parser.add_option("--update",  dest = "update",  default = None,  action = "store_true",  help = "update all secondary calculables")
    parser.add_option("--updates", dest = "update",  default = None,  metavar = "sc1,sc2,..", help = "update specified secondary calculables")
    parser.add_option("--jobid",   dest = "jobId",   default = None,  metavar = "id",         help = "[for internal use only]")
    parser.add_option("--site",    dest = "site",    default = None,  metavar = "prefix",     help = "[for internal use only]")
    parser.add_option("--tags",    dest = "tags",    default = None,  action = "callback", callback = argOrTrue, help = "run specified tags only, or list tags")
    parser.add_option("--samples", dest = "samples", default = None,  action = "callback", callback = argOrTrue, help = "run specified samples only, or list samples")
    parser.add_option("--omit",    dest = "omit",    default = "",    metavar = "sample1,...", help = "omit specified samples")
    parser.add_option("--nocheck", dest = "nocheck", default = False, action = "store_true",   help = "skip the cache check of secondary calcs")
    options,args = parser.parse_args()

    if len(args)!=1 :
        parser.print_help()
        exit()

    assert (options.jobId==None or options.batch==False), "options jobid and batch cannot be used simultaneously"
    if options.batch :
        assert (options.loop!=None and options.slices!=None), "when using --batch, use also --loop and --slices"
    return options,args[0]
############################################
def setupSCIPY() :
    try:
        import scipy.optimize as opt
    except:
        pass
############################################
def setupROOT() :
    sys.argv.append("-b")
    
    import ROOT as r
    r.gROOT.SetStyle("Plain")
    r.gStyle.SetPalette(1)
    r.TH1.SetDefaultSumw2(True)
    r.gErrorIgnoreLevel = 2000
    r.gROOT.SetBatch(True)

    sys.argv.pop()
############################################
def moduleName(arg) :
    sys.path.extend([os.environ["PWD"], os.environ["PWD"]+"/analyses"])
    while "//" in arg : arg = arg.replace("//","/")
    module = arg.replace("analyses/","").replace(".py","")
    return module
############################################
def importedClass(module) :
    exec("import "+module)
    from core.analysis import analysis
    count = 0
    theClass = None
    for itemName in dir(eval(module)) :
        item=eval(module+"."+itemName)
        if not inspect.isclass(item) : continue        
        if issubclass(item, analysis) and item is not analysis :
            count+=1
            theClass = item
    assert count==1,arg+" needs exactly 1 class which inherits from analysis; it has "+str(count)
    assert module==theClass.__name__,"module name %s != class name %s"%(module, theClass.__name__)
    return theClass
############################################
def submitBatchJob(jobCmd, indexDict, subScript, jobScript, condorTemplate) :
    jobScriptFileName = "%(base)s/%(tag)s/%(sample)s/job%(iSlice)d.sh"%indexDict

    os.system("cp -p "+jobScript+" "+jobScriptFileName)
    outJobScript = open(jobScriptFileName,"a")
    outJobScript.write("\ncd "+os.environ["PWD"]+"\n")
    outJobScript.write(jobCmd)
    outJobScript.close()

    if os.path.exists(condorTemplate) :
        condorFileName = jobScriptFileName.replace(".sh",".condor")
        os.system("cat %s | sed s@JOBFLAG@%s@g > %s"%(condorTemplate, jobScriptFileName, condorFileName))
        arg = condorFileName
    else :
        arg = jobScriptFileName

    subCmd = "./%s %s"%(subScript, arg)
    os.system(subCmd)
############################################
def doBatch(someInstance) :
    argsAndOptions = sys.argv[1:]
    argsAndOptions.remove("--batch")
    baseCmd = "./supy "+" ".join(argsAndOptions)

    subScript,jobScript,condorTemplate = configuration.batchScripts()
    os.system("chmod +x "+subScript)

    site = configuration.sitePrefix()

    scriptDir = someInstance.globalStem
    os.system("mkdir -p "+scriptDir)

    args = []
    for conf in someInstance.configurations :
        for looper in someInstance.listsOfLoopers[conf['tag']] :
            os.system("mkdir -p %s/%s/%s"%(scriptDir,conf['tag'],looper.name))
            for iSlice in range(int(options.slices)) :
                listOfIndices = {"base":scriptDir,
                                 "tag":conf['tag'],
                                 "sample":looper.name,
                                 "iSlice":iSlice,
                                 "site":site}
                args.append( (baseCmd + " --site %(site)s --jobid %(iSlice)d --tag '%(tag)s' --sample %(sample)s"%listOfIndices,
                               listOfIndices, subScript, jobScript, condorTemplate) )
    utils.operateOnListUsingQueue(configuration.nCoresDefault(), utils.qWorker(submitBatchJob), args)
############################################
        
# get options
options,arg = opts()

# set up ROOT
setupSCIPY()
setupROOT()

# compile cpp source files
utils.compileSources(inList = configuration.cppFiles())
utils.generateDictionaries(inList = configuration.dictionariesToGenerate())

# construct the analysis
someClass = importedClass(moduleName(arg))
someInstance = someClass(options)

if options.batch : #make one script per job and submit them to the queue
    doBatch(someInstance)
elif options.loop!=None : #loop over the events
    someInstance.loop()

# merge output and conclude
if options.jobId==None and not options.batch :
    try:
        someInstance.mergeAllOutput()
        someInstance.manageSecondaries(options.update)
        if options.update==None :
            someInstance.concludeAll()
    except AssertionError as foo:
        print
        print foo
        #print "Have you looped?"
############################################
